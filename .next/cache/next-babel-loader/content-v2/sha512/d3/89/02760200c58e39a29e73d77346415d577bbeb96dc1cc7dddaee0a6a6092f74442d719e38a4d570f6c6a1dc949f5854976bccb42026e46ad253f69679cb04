{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, memo, useCallback } from 'react';\nimport SearchHeader from 'react-storefront/search/SearchHeader';\nimport SearchForm from 'react-storefront/search/SearchForm';\nimport SearchField from 'react-storefront-amp/search/AmpSearchField';\nimport SearchDrawer from 'react-storefront-amp/search/AmpSearchDrawer';\nimport SearchButton from 'react-storefront-amp/search/AmpSearchButton';\nimport SearchSuggestions from 'react-storefront-amp/search/AmpSearchSuggestions';\nimport SearchProvider from 'react-storefront/search/SearchProvider';\nimport LazyHydrate from 'react-storefront/LazyHydrate';\nimport makeStyles from \"@material-ui/styles/makeStyles\";\nconst useStyles = makeStyles(theme => ({\n  button: {\n    display: 'none'\n  },\n  [theme.breakpoints.down('xs')]: {\n    button: {\n      display: 'block'\n    }\n  }\n}));\n\nfunction SearchMobile() {\n  const {\n    0: drawerOpen,\n    1: setDrawerOpen\n  } = useState(false);\n  const {\n    0: query,\n    1: setQuery\n  } = useState('');\n  const {\n    0: hydrated,\n    1: setHydrated\n  } = useState(false);\n\n  const toggleDrawer = () => setDrawerOpen(!drawerOpen);\n\n  const closeDrawer = () => setDrawerOpen(false);\n\n  const classes = useStyles();\n  const hydrate = useCallback(() => {\n    setHydrated(true);\n  }, []);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(SearchButton, {\n      className: classes.button,\n      onClick: toggleDrawer,\n      onTouchStart: hydrate\n    }), /*#__PURE__*/_jsx(LazyHydrate, {\n      id: \"search-mobile\",\n      hydrated: hydrated,\n      children: /*#__PURE__*/_jsx(SearchDrawer, {\n        open: drawerOpen,\n        onClose: closeDrawer,\n        children: /*#__PURE__*/_jsxs(SearchForm, {\n          children: [/*#__PURE__*/_jsx(SearchHeader, {\n            children: /*#__PURE__*/_jsx(SearchField, {\n              onChange: value => setQuery(value),\n              value: query\n            })\n          }), /*#__PURE__*/_jsx(SearchProvider, {\n            query: query,\n            active: drawerOpen,\n            children: /*#__PURE__*/_jsx(SearchSuggestions, {})\n          })]\n        })\n      })\n    })]\n  });\n}\n\nexport default /*#__PURE__*/memo(SearchMobile);","map":null,"metadata":{},"sourceType":"module"}