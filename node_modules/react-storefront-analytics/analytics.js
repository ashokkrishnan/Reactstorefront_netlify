"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initialize = initialize;
exports.activate = activate;
exports.reset = exports.renderAmpAnalyticsTags = exports.addAmpTarget = exports.addAmpAnalyticsTag = exports.fire = exports.events = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _cookie = require("./utils/cookie.js");

var _ttiPolyfill = _interopRequireDefault(require("tti-polyfill"));

var _TrackAmp = require("./TrackAmp");

/**
 * @license
 * Copyright Â© 2017-2019 Moov Corporation.  All rights reserved.
 */
var EventEmitter = require('events');

var events = new EventEmitter(); // When false, any fired events will be put in a queue until activate() is called

exports.events = events;
var activated = false; // events accumulate here when activated is false

var queue = [];

var analyticsEnabled = function analyticsEnabled() {
  return (0, _cookie.getCookie)('rsf_disable_analytics') !== 'true';
};

function initialize(_x) {
  return _initialize.apply(this, arguments);
}
/**
 * Stops queuing and immediatley fires all queued events
 * @private
 */


function _initialize() {
  _initialize = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(delayUntilInteractive) {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!delayUntilInteractive) {
              _context.next = 3;
              break;
            }

            _context.next = 3;
            return _ttiPolyfill["default"].getFirstConsistentlyInteractive();

          case 3:
            if (analyticsEnabled()) {
              activate();
            } else {
              console.log('Skipping analytics because a rsf_disable_analytics=true cookie is present.');
            }

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _initialize.apply(this, arguments);
}

function activate() {
  activated = true;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = queue[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var call = _step.value;
      fire(call.event, call.args);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

var getMetaData = function getMetaData() {
  return {
    title: document.title,
    pathname: location.pathname,
    search: location.search,
    uri: location.pathname + location.search,
    referrer: document.referrer
  };
};

var fire = function fire(event, data) {
  data = data || {};

  if (!data.eventContext) {
    data = {
      eventContext: getMetaData(),
      eventParams: data
    };
  }

  if (activated) {
    events.emit(event, data);
  } else {
    queue.push({
      event: event,
      args: data
    });
  }
};

exports.fire = fire;
var ampAnalyticsTags = [];
var ampTargets = [];

var addAmpAnalyticsTag = function addAmpAnalyticsTag(createTag) {
  ampAnalyticsTags.push(createTag);
};

exports.addAmpAnalyticsTag = addAmpAnalyticsTag;

var addAmpTarget = function addAmpTarget(target) {
  ampTargets.push(target);
};

exports.addAmpTarget = addAmpTarget;

var renderAmpAnalyticsTags = function renderAmpAnalyticsTags() {
  return ampAnalyticsTags.map(function (tag) {
    return tag({
      trackedTargets: ampTargets
    });
  }).join('\n');
};

exports.renderAmpAnalyticsTags = renderAmpAnalyticsTags;

var reset = function reset() {
  activated = false;
  ampAnalyticsTags = [];
  ampTargets = [];
  queue = [];
  (0, _TrackAmp.reset)();
};

exports.reset = reset;
//# sourceMappingURL=analytics.js.map