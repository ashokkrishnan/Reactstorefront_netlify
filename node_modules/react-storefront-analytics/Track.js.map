{"version":3,"sources":["../src/Track.js"],"names":["getTriggerEvents","event","onClick","Track","children","onSuccess","data","triggerEvents","fire","fireEvent","e","setTimeout","trigger","rest","child","React","Children","only","triggerHandlers","originalHandler","props","cloneElement","propTypes","PropTypes","oneOfType","string","object","func","defaultProps","Function","prototype"],"mappings":";;;;;;;;;;;;;;;;;AAIA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA;;;;AAIA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,KAAK,EAAI;AAChC,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO;AAAEC,MAAAA,OAAO,EAAED;AAAX,KAAP;AACD,GAFD,MAEO;AACL,WAAOA,KAAP;AACD;AACF,CAND;AAQA;;;;;;;;;;;;;;;;;;;AAiBA,IAAME,KAAK,GAAG,SAARA,KAAQ,OAA6C;AAAA,MAA1CC,QAA0C,QAA1CA,QAA0C;AAAA,MAAhCH,KAAgC,QAAhCA,KAAgC;AAAA,MAAzBI,SAAyB,QAAzBA,SAAyB;AAAA,MAAXC,IAAW;AACzD,MAAMC,aAAa,GAAGP,gBAAgB,CAACC,KAAD,CAAtC;;AACA,MAAIA,KAAK,IAAI,kBAAb,EAAuB;AACrB,WACE,gCAAC,oBAAD;AAAU,MAAA,KAAK,EAAEM,aAAjB;AAAgC,MAAA,IAAI,EAAED;AAAtC,OACGF,QADH,CADF;AAKD;;AARwD,sBASxC,gCATwC;AAAA,MASjDI,IATiD,iBASjDA,IATiD;;AAWzD,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,CAAC,EAAI;AACrBC,IAAAA,UAAU;AAAA;AAAA;AAAA;AAAA,iCAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACT;AACQC,cAAAA,OAFC,GAEoBN,IAFpB,CAEDM,OAFC,EAEWC,IAFX,6CAEoBP,IAFpB;AAAA;AAAA,qBAGHE,IAAI,CAACE,CAAD,EAAIG,IAAJ,CAHD;;AAAA;AAITR,cAAAA,SAAS;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,GAAV;AAMD,GAPD;;AASA,MAAMS,KAAK,GAAGV,QAAQ,IAAIW,kBAAMC,QAAN,CAAeC,IAAf,CAAoBb,QAApB,CAA1B;;AACA,MAAI,CAACU,KAAL,EAAY,OAAO,IAAP;AAEZ,MAAII,eAAe,GAAG,EAAtB;;AAvByD,6BAyBhDN,OAzBgD;AA0BvD,QAAMO,eAAe,GAAGL,KAAK,CAACM,KAAN,CAAYR,OAAZ,CAAxB;;AACAM,IAAAA,eAAe,CAACN,OAAD,CAAf,GAA2B,YAAa;AACtC,UAAIO,eAAJ,EAAqBA,eAAe,MAAf;AACrBV,MAAAA,SAAS,CAACF,aAAa,CAACK,OAAD,CAAd,CAAT;AACD,KAHD;AA3BuD;;AAyBzD,OAAK,IAAIA,OAAT,IAAoBL,aAApB,EAAmC;AAAA,UAA1BK,OAA0B;AAMlC;;AAED,SAAOG,kBAAMM,YAAN,CAAmBP,KAAnB,oBAA+BA,KAAK,CAACM,KAArC,MAA+CF,eAA/C,EAAP;AACD,CAlCD;;AAoCAf,KAAK,CAACmB,SAAN,GAAkB;AAChB;;;;;AAKArB,EAAAA,KAAK,EAAEsB,sBAAUC,SAAV,CAAoB,CAACD,sBAAUE,MAAX,EAAmBF,sBAAUG,MAA7B,CAApB,CANS;;AAQhB;;;AAGArB,EAAAA,SAAS,EAAEkB,sBAAUI;AAXL,CAAlB;AAcAxB,KAAK,CAACyB,YAAN,GAAqB;AACnBhB,EAAAA,OAAO,EAAE,SADU;AAEnBP,EAAAA,SAAS,EAAEwB,QAAQ,CAACC;AAFD,CAArB;eAKe3B,K","sourcesContent":["/**\n * @license\n * Copyright Â© 2017-2019 Moov Corporation.  All rights reserved.\n */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport useAnalytics from './useAnalytics'\nimport { useAmp } from 'next/amp'\nimport TrackAmp from './TrackAmp'\n\n/**\n * Returns the value of the trigger normalized to an object. If trigger is a string,\n * this function will return { [trigger]: event }\n */\nconst getTriggerEvents = event => {\n  if (typeof event === 'string') {\n    return { onClick: event }\n  } else {\n    return event\n  }\n}\n\n/**\n * Fires an analytics event when the user interacts with the child component.  By default this fires when the user\n * clicks on the child component, but this can be overriden using the `event` prop.  The value of event should\n * be the name of the event prop to bind to. All additional props will be passed as options along with the event.\n *\n * Example:\n *\n * <Track event=\"addedToCart\" product={this.props.product}>\n *  <Button>Add to Cart</Button>\n * </Track>\n *\n * To trigger events on multiple triggers provide the event prop as an object:\n *\n * <Track event={{onClick: 'onProductClicked', onFocus: 'onProductFocus'}} product={this.props.product}>\n *  <Button>Add to Cart</Button>\n * </Track>\n */\nconst Track = ({ children, event, onSuccess, ...data }) => {\n  const triggerEvents = getTriggerEvents(event)\n  if (event && useAmp()) {\n    return (\n      <TrackAmp event={triggerEvents} data={data}>\n        {children}\n      </TrackAmp>\n    )\n  }\n  const { fire } = useAnalytics()\n\n  const fireEvent = e => {\n    setTimeout(async () => {\n      // Next adds a 'trigger' prop\n      const { trigger, ...rest } = data\n      await fire(e, rest)\n      onSuccess()\n    })\n  }\n\n  const child = children && React.Children.only(children)\n  if (!child) return null\n\n  let triggerHandlers = {}\n\n  for (let trigger in triggerEvents) {\n    const originalHandler = child.props[trigger]\n    triggerHandlers[trigger] = (...args) => {\n      if (originalHandler) originalHandler(...args)\n      fireEvent(triggerEvents[trigger])\n    }\n  }\n\n  return React.cloneElement(child, { ...child.props, ...triggerHandlers })\n}\n\nTrack.propTypes = {\n  /**\n   * The name of the event to emit. When specified as a string then the default trigger\n   * is 'onClick'. Can be provided as an object, eg {onClick: 'productClicked', onMouseOver: 'productHovered'}\n   * to specify a custom trigger or multiple events.\n   */\n  event: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n  /**\n   * A function to call once the event has been successfully sent by all analytics targets.\n   */\n  onSuccess: PropTypes.func,\n}\n\nTrack.defaultProps = {\n  trigger: 'onClick',\n  onSuccess: Function.prototype,\n}\n\nexport default Track\n"],"file":"Track.js"}