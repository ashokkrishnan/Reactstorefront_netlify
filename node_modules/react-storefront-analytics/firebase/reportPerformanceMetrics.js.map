{"version":3,"sources":["../../src/firebase/reportPerformanceMetrics.js"],"names":["reportPeformanceMetrics","firebasePerf","window","performance","reportMetric","name","value","trace","start","putMetric","stop","getEntriesByType","serverTiming","metric","duration","metrics","getCLS","getFID","getLCP","getTTFB","getFCP","forEach","getMetric","e","console","warn"],"mappings":";;;;;;;AAAA;;AAEA;;;;;;;;;;;;AAYe,SAASA,uBAAT,CAAiCC,YAAjC,EAA+C;AAC5D;AACA,MAAI,OAAOC,MAAM,CAACC,WAAd,KAA8B,WAAlC,EAA+C;AAC7C,QAAI;AAAA,UAGOC,YAHP,GAGF,SAASA,YAAT,CAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC;AACjC,YAAMC,KAAK,GAAGN,YAAY,CAACM,KAAb,CAAmBF,IAAnB,CAAd;AACAE,QAAAA,KAAK,CAACC,KAAN;AACAD,QAAAA,KAAK,CAACE,SAAN,CAAgBJ,IAAhB,EAAsBC,KAAtB;AACAC,QAAAA,KAAK,CAACG,IAAN;AACD,OARC,EAUF;;;AATA,UAAMP,WAAW,GAAGD,MAAM,CAACC,WAA3B;AADE;AAAA;AAAA;;AAAA;AAWF,6BAAmBA,WAAW,CAACQ,gBAAZ,CAA6B,YAA7B,EAA2C,CAA3C,EAA8CC,YAAjE,8HAA+E;AAAA,cAAtEC,MAAsE;AAC7ET,UAAAA,YAAY,CAACS,MAAM,CAACR,IAAR,EAAcQ,MAAM,CAACC,QAArB,CAAZ;AACD;AAbC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeF,UAAMC,OAAO,GAAG,CAACC,iBAAD,EAASC,iBAAT,EAAiBC,iBAAjB,EAAyBC,kBAAzB,EAAkCC,iBAAlC,CAAhB;AAEAL,MAAAA,OAAO,CAACM,OAAR,CAAgB,UAAAC,SAAS,EAAI;AAC3BA,QAAAA,SAAS,CACP,UAAAT,MAAM;AAAA,iBAAIT,YAAY,CAACS,MAAM,CAACR,IAAR,EAAcQ,MAAM,CAACP,KAArB,CAAhB;AAAA,SADC,EAEP;AAAK;AAFE,SAAT;AAID,OALD;AAMD,KAvBD,CAuBE,OAAOiB,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,IAAR,CAAa,mCAAb,EAAkDF,CAAlD;AACD;AACF;AACF","sourcesContent":["import { getCLS, getFID, getLCP, getTTFB, getFCP } from 'web-vitals'\n\n/**\n * Reports the following to Firebase:\n *\n *  TTFB\n *  CLS\n *  FCP\n *  LCP\n *  FID\n *  All Server-Timing header values\n *\n * @param {Object} firebasePerf The firebase peformance object\n */\nexport default function reportPeformanceMetrics(firebasePerf) {\n  /* istanbul ignore else */\n  if (typeof window.performance !== 'undefined') {\n    try {\n      const performance = window.performance\n\n      function reportMetric(name, value) {\n        const trace = firebasePerf.trace(name)\n        trace.start()\n        trace.putMetric(name, value)\n        trace.stop()\n      }\n\n      // Server-Timing header\n      for (let metric of performance.getEntriesByType('navigation')[0].serverTiming) {\n        reportMetric(metric.name, metric.duration)\n      }\n\n      const metrics = [getCLS, getFID, getLCP, getTTFB, getFCP]\n\n      metrics.forEach(getMetric => {\n        getMetric(\n          metric => reportMetric(metric.name, metric.value),\n          true /* report each measurement, not just the first */,\n        )\n      })\n    } catch (e) {\n      console.warn('Could not get performance metrics', e)\n    }\n  }\n}\n"],"file":"reportPerformanceMetrics.js"}