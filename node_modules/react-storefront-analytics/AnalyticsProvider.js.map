{"version":3,"sources":["../src/AnalyticsProvider.js"],"names":["AnalyticsProvider","children","delayUntilInteractive","setTimeout","value","fire","events","addAmpAnalyticsTag","propTypes","PropTypes","bool","defaultProps","trackPageViews"],"mappings":";;;;;;;;;;;AAIA;;AACA;;AACA;;AACA;;AACA;;AARA;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,OAAyC;AAAA,MAAtCC,QAAsC,QAAtCA,QAAsC;AAAA,MAA5BC,qBAA4B,QAA5BA,qBAA4B;;AACjE;AACA,MAAI,kBAAJ,EAAc;AACZ;AACD;;AAED,wBAAU,YAAM;AACd;AACAC,IAAAA,UAAU,CAAC,YAAM;AACf,iCAAWD,qBAAX;AACD,KAFS,CAAV;AAGD,GALD,EAKG,EALH;AAOA,MAAME,KAAK,GAAG,oBACZ;AAAA,WAAO;AACLC,MAAAA,IAAI,EAAJA,eADK;AAELC,MAAAA,MAAM,EAANA,iBAFK;AAGLC,MAAAA,kBAAkB,EAAlBA;AAHK,KAAP;AAAA,GADY,EAMZ,EANY,CAAd;AASA,SAAO,gCAAC,4BAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEH;AAAlC,KAA0CH,QAA1C,CAAP;AACD,CAvBD;;AAyBAD,iBAAiB,CAACQ,SAAlB,GAA8B;AAC5B;;;AAGAN,EAAAA,qBAAqB,EAAEO,sBAAUC;AAJL,CAA9B;AAOAV,iBAAiB,CAACW,YAAlB,GAAiC;AAC/BC,EAAAA,cAAc,EAAE;AADe,CAAjC;eAIeZ,iB","sourcesContent":["/**\n * @license\n * Copyright Â© 2017-2019 Moov Corporation.  All rights reserved.\n */\nimport React, { useEffect, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { fire, events, addAmpAnalyticsTag, initialize } from './analytics'\nimport AnalyticsContext from './AnalyticsContext'\nimport { useAmp } from 'next/amp'\nimport { reset as resetAnalytics } from './analytics'\n\n/**\n * Components that are decendents of AnalyticsProvider can use the `useAnalytics` hook to:\n * 1) Get access to the `fire` function which can be used to broadcast analytics events:\n *\n * ```\n *  import React, { useCallback } from 'react'\n *  import Button from '@material-ui/core/Button'\n *  import { useAnalytics } from 'react-storefront-analytics'\n *\n *  const MyComponent = () => {\n *    const { fire } = useAnalytics()\n *\n *    // This will call the someEvent() method on all configured analytics targets.\n *    const fireAnalyticsEvent = useCallback(() => {\n *      const eventData = { foo: 'bar' }\n *      fire('someEvent', eventData)\n *    }, [])\n *\n *    return <Button onClick={fireAnalyticsEvent}>Click Me</Button>\n *  }\n * ```\n *\n * 2) Get access to the `events` broadcaster object to listen to any event being triggered:\n * ```\n *  import { useAnalytics } from 'react-storefront-analytics'\n *\n *  const MyAnalyticsHandler = () => {\n *    const { events } = useAnalytics()\n *    events.on('someEvent', e => console.log('someEvent triggered with: ', e.eventParams))\n *  }\n * ```\n * `useAnalytics.events` can be used to implement analytics tracking for any vendor.\n *\n * 3) Get access to `addAmpAnalyticsTag` function. This function can be used to build the\n * <amp-analytics> tag in a custom analytics handler. `addAmpAnalyticsTag` takes a function\n * as a parameter. The function provided is called with an array of all targets that are\n * tracked by being wrapped by a <Track> component. Each target is represented as an object\n * in the form of `{ event, eventParams, selector }` where `event` represents the name of the\n * event, `eventParams` represents the event data passed as props to <Track> and the selector\n * is a unique auto-generated CSS selector pointing to a specific target.\n * ```\n * import { useAmp } from 'next/amp'\n * import { useAnalytics } from 'react-storefront-analytics'\n *\n * const MyAnalyticsHandler = () => {\n *   const { events, addAmpAnalyticsTag } = useAnalytics()\n *\n *   if (useAmp()) {\n *     let triggers = []\n *     addAmpAnalyticsTag(targets => {\n *       targets.map(({event, eventParams, selector}) => {\n *         triggers.push({on: 'click', request: 'event', vars: {id: eventParams.id}, selector})\n *       })\n *       const configuration = {triggers, vars: {myAmpVar: 'myAmpVar'}}\n *       return (\n *         `<amp-analytics type=\"myVendorType\">` +\n *         `<script type=\"application/json\">${JSON.stringify(configuration)}</script>` +\n *         `</amp-analytics>`\n *       )\n *     })\n *     return null\n *   } else {\n *     *handle analytics events for non-AMP*\n *     events.on(...)\n *   }\n * }\n * ```\n */\nconst AnalyticsProvider = ({ children, delayUntilInteractive }) => {\n  // Analytics state and AMP handlers are stateful in module scope\n  if (useAmp()) {\n    resetAnalytics()\n  }\n\n  useEffect(() => {\n    // Allow targets to add event listeners before initializing\n    setTimeout(() => {\n      initialize(delayUntilInteractive)\n    })\n  }, [])\n\n  const value = useMemo(\n    () => ({\n      fire,\n      events,\n      addAmpAnalyticsTag,\n    }),\n    [],\n  )\n\n  return <AnalyticsContext.Provider value={value}>{children}</AnalyticsContext.Provider>\n}\n\nAnalyticsProvider.propTypes = {\n  /**\n   * Set to true to delay loading of analytics until the app is interactive\n   */\n  delayUntilInteractive: PropTypes.bool,\n}\n\nAnalyticsProvider.defaultProps = {\n  trackPageViews: true,\n}\n\nexport default AnalyticsProvider\n"],"file":"AnalyticsProvider.js"}