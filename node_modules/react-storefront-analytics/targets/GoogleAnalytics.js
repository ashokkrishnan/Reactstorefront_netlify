"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _head = _interopRequireDefault(require("next/head"));

var _useAnalytics2 = _interopRequireDefault(require("../useAnalytics"));

var _amp = require("next/amp");

/**
 * @license
 * Copyright Â© 2017-2019 Moov Corporation.  All rights reserved.
 */

/**
 * Component which includes the Google Analytics script in document Head.
 *
 * The child of this component is expected to be an object mapping event names
 * to the payload that is to be sent when calling the ga() command queue.
 *
 * Given an example configuration of:
 * ```js
 *  <GoogleAnalytics trackingId="my-tracking-id" globalObjectName="ga">
 *   {{
 *     productClicked: ({ eventParams }) => ({
 *      hitType: 'event',
 *      eventCategory: 'interaction',
 *      eventAction: 'click',
 *      eventLabel: eventParams.product.id.toString(),
 *      eventValue: 1
 *     })
 *   }}
 *  </GoogleAnalytics>
 * ```
 *
 * Having set up one or more <Track> components...
 * ```js
 *  <Track event="productClicked" product={{id: 1}}}>
 *   <MyComponent />
 *  </Track>
 * ```
 *
 * ...or when triggering events using `useAnalytics.fire`:
 * ```js
 *   const { fire } = useAnalytics()
 *   return <MyComponent onClick={() => fire('productClicked', {product: {id: 1}})}>
 * ```
 *
 * GoogleAnalytics component will listen to `productClicked` events and call the `ga()`
 * queue with a 'send' command:
 * ```js
 *   window.ga(
 *    'send',
 *    {
 *      eventType: 'event',
 *      eventCategory: 'interaction',
 *      eventAction: 'click',
 *      eventLabel: '1',
 *      eventValue: 1
 *    }
 *   )
 * ```
 *
 * In AMP, the configuration provided as the child is used to construct a set of triggers,
 * in the case of the above example:
 * ```js
 *   [..., {
 *     on: 'click',
 *     request: 'event', // The AMP trigger `request` property is equal to the `hitType` configured
 *     vars: {
 *       eventCategory: 'interaction',
 *       eventAction: 'click',
 *       eventLabel: '1',
 *       eventValue: 1
 *     },
 *     selector: *autogenerated AMP selector identifying the specific MyComponent instance*
 *   }, ...]
 * ```
 * A trigger object is created for each element wrapped in <Track> that has an onClick event.
 * To exclude an event from being triggered in AMP add the `includeInAMP` property as `false`
 * in the event configuration.
 */
var GoogleAnalytics = function GoogleAnalytics(_ref) {
  var globalObjectName = _ref.globalObjectName,
      trackingId = _ref.trackingId,
      useAmpClientId = _ref.useAmpClientId,
      trace = _ref.trace,
      useBeacon = _ref.useBeacon,
      children = _ref.children;
  var handlers = children || {};

  var _useAnalytics = (0, _useAnalytics2["default"])(),
      events = _useAnalytics.events,
      addAmpAnalyticsTag = _useAnalytics.addAmpAnalyticsTag;

  if ((0, _amp.useAmp)()) {
    var createAmpTriggers = function createAmpTriggers(trackedTargets) {
      var targetTriggers = trackedTargets.map(function (_ref2) {
        var event = _ref2.event,
            eventParams = _ref2.eventParams,
            selector = _ref2.selector;

        var _handlers$event = handlers[event]({
          eventParams: eventParams,
          eventContext: {}
        }),
            hitType = _handlers$event.hitType,
            _handlers$event$inclu = _handlers$event.includeInAMP,
            includeInAMP = _handlers$event$inclu === void 0 ? true : _handlers$event$inclu,
            vars = (0, _objectWithoutProperties2["default"])(_handlers$event, ["hitType", "includeInAMP"]);

        if (includeInAMP) {
          if (event === 'pageview') {
            return {
              on: 'visible',
              request: hitType
            };
          }

          return {
            on: 'click',
            request: hitType,
            vars: vars,
            selector: selector
          };
        } else {
          return null;
        }
      });
      return targetTriggers.filter(Boolean);
    };

    var createAmpConfiguration = function createAmpConfiguration(_ref3) {
      var trackedTargets = _ref3.trackedTargets;
      return {
        vars: {
          account: trackingId
        },
        triggers: createAmpTriggers(trackedTargets)
      };
    };

    addAmpAnalyticsTag(function (_ref4) {
      var trackedTargets = _ref4.trackedTargets;
      var configuration = createAmpConfiguration({
        trackedTargets: trackedTargets
      });
      return "<amp-analytics type=\"googleanalytics\">" + "<script type=\"application/json\">".concat(JSON.stringify(configuration), "</script>") + "</amp-analytics>";
    });
    return null;
  }

  (0, _react.useEffect)(function () {
    setTimeout(function () {
      if (trace) {
        window.ga_debug = {
          trace: trace
        };
      }

      if (useBeacon) {
        if (window[globalObjectName]) {
          window[globalObjectName]('set', 'transport', 'beacon');
        }
      }

      Object.keys(handlers).forEach(function (event) {
        events.on(event, function (eventParams) {
          var _handlers$event2 = handlers[event](eventParams),
              includeInAMP = _handlers$event2.includeInAMP,
              eventConfiguration = (0, _objectWithoutProperties2["default"])(_handlers$event2, ["includeInAMP"]);

          if (window[globalObjectName]) {
            window[globalObjectName]('send', eventConfiguration);
          }
        });
      });
    });
  }, [globalObjectName, events, trace, useBeacon]);
  return _react["default"].createElement(_head["default"], null, _react["default"].createElement("script", {
    dangerouslySetInnerHTML: {
      __html: "\n          (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n          })(window,document,'script','https://www.google-analytics.com/analytics.js','".concat(globalObjectName, "');\n          ").concat(globalObjectName, "('create', '").concat(trackingId, "', 'auto', { useAmpClientId: ").concat(useAmpClientId.toString(), " });\n        ")
    }
  }));
};

GoogleAnalytics.defaultProps = {
  globalObjectName: 'ga',
  useAmpClientId: true,
  useBeacon: true
};

var _default = (0, _react.memo)(GoogleAnalytics);

exports["default"] = _default;
//# sourceMappingURL=GoogleAnalytics.js.map