{"version":3,"sources":["../src/analytics.js"],"names":["EventEmitter","require","events","activated","queue","analyticsEnabled","initialize","delayUntilInteractive","ttiPolyfill","getFirstConsistentlyInteractive","activate","console","log","call","fire","event","args","getMetaData","title","document","pathname","location","search","uri","referrer","data","eventContext","eventParams","emit","push","ampAnalyticsTags","ampTargets","addAmpAnalyticsTag","createTag","addAmpTarget","target","renderAmpAnalyticsTags","map","tag","trackedTargets","join","reset"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Â© 2017-2019 Moov Corporation.  All rights reserved.\n */\n\nimport { getCookie } from './utils/cookie.js'\nimport ttiPolyfill from 'tti-polyfill'\nimport { reset as resetAmpAnalyticsSelectorIds } from './TrackAmp'\n\nconst EventEmitter = require('events')\n\nexport const events = new EventEmitter()\n\n// When false, any fired events will be put in a queue until activate() is called\nlet activated = false\n\n// events accumulate here when activated is false\nlet queue = []\n\nconst analyticsEnabled = () => getCookie('rsf_disable_analytics') !== 'true'\n\nexport async function initialize(delayUntilInteractive) {\n  if (delayUntilInteractive) {\n    await ttiPolyfill.getFirstConsistentlyInteractive()\n  }\n\n  if (analyticsEnabled()) {\n    activate()\n  } else {\n    console.log('Skipping analytics because a rsf_disable_analytics=true cookie is present.')\n  }\n}\n\n/**\n * Stops queuing and immediatley fires all queued events\n * @private\n */\nexport function activate() {\n  activated = true\n\n  for (let call of queue) {\n    fire(call.event, call.args)\n  }\n}\n\nconst getMetaData = () => ({\n  title: document.title,\n  pathname: location.pathname,\n  search: location.search,\n  uri: location.pathname + location.search,\n  referrer: document.referrer,\n})\n\nexport const fire = (event, data) => {\n  data = data || {}\n\n  if (!data.eventContext) {\n    data = { eventContext: getMetaData(), eventParams: data }\n  }\n\n  if (activated) {\n    events.emit(event, data)\n  } else {\n    queue.push({ event, args: data })\n  }\n}\n\nlet ampAnalyticsTags = []\nlet ampTargets = []\n\nexport const addAmpAnalyticsTag = createTag => {\n  ampAnalyticsTags.push(createTag)\n}\n\nexport const addAmpTarget = target => {\n  ampTargets.push(target)\n}\n\nexport const renderAmpAnalyticsTags = () => {\n  return ampAnalyticsTags\n    .map(tag => {\n      return tag({ trackedTargets: ampTargets })\n    })\n    .join('\\n')\n}\n\nexport const reset = () => {\n  activated = false\n  ampAnalyticsTags = []\n  ampTargets = []\n  queue = []\n  resetAmpAnalyticsSelectorIds()\n}\n"],"file":"analytics.js"}