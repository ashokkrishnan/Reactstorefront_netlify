{"version":3,"sources":["../src/AmpState.js"],"names":["AmpState","id","amp","remote","initialState","children","AmpContext","nextId","props","Object","assign","bind","attribute","value","expression","src","url","__html","JSON","stringify","propTypes","PropTypes","string","any","object","defaultProps"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;;AAGA,SAASA,QAAT,OAA+D;AAAA,MAA3CC,EAA2C,QAA3CA,EAA2C;AAAA,MAAvCC,GAAuC,QAAvCA,GAAuC;AAAA,MAAlCC,MAAkC,QAAlCA,MAAkC;AAAA,MAA1BC,YAA0B,QAA1BA,YAA0B;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAAA,cAC1C,uBAAWC,sBAAX,KAA0B,EADgB;AAAA,MACrDC,MADqD,SACrDA,MADqD;;AAG7DN,EAAAA,EAAE,GAAGA,EAAE,IAAIM,MAAM,EAAjB;AAEAF,EAAAA,QAAQ,GAAGA,QAAQ,GAAGA,QAAQ,CAACJ,EAAD,CAAX,GAAkB,IAArC;AAEA,MAAMO,KAAK,GAAG;AAAEP,IAAAA,EAAE,EAAFA;AAAF,GAAd;;AAEA,MAAIE,MAAJ,EAAY;AACVM,IAAAA,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqBN,GAAG,CAACS,IAAJ,CAAS;AAAEC,MAAAA,SAAS,EAAE,KAAb;AAAoBC,MAAAA,KAAK,EAAEV,MAAM,CAACW;AAAlC,KAAT,CAArB,EAA+E;AAC7EC,MAAAA,GAAG,EAAEZ,MAAM,CAACa;AADiE,KAA/E;AAGD;;AAED,MAAI,kBAAJ,EAAc;AACZ,WACE,kEACE,gCAAC,gBAAD,QACE;AACE,MAAA,KAAK,MADP;AAEE,wBAAe,UAFjB;AAGE,MAAA,GAAG,EAAC;AAHN,MADF,CADF,EAQE,6CAAeR,KAAf,EACE;AACE,MAAA,IAAI,EAAC,kBADP;AAEE,MAAA,uBAAuB,EAAE;AACvBS,QAAAA,MAAM,EAAEC,IAAI,CAACC,SAAL,CAAef,YAAf;AADe;AAF3B,MADF,CARF,EAgBGC,QAhBH,CADF;AAoBD,GArBD,MAqBO;AACL,WAAOA,QAAP;AACD;AACF;;AAEDL,QAAQ,CAACoB,SAAT,GAAqB;AACnB;;;AAGAnB,EAAAA,EAAE,EAAEoB,sBAAUC,MAJK;;AAKnB;;;AAGAlB,EAAAA,YAAY,EAAEiB,sBAAUE,GARL;;AASnB;;;;AAIApB,EAAAA,MAAM,EAAEkB,sBAAUG;AAbC,CAArB;AAgBAxB,QAAQ,CAACyB,YAAT,GAAwB;AACtBrB,EAAAA,YAAY,EAAE;AADQ,CAAxB;;eAIe,iCAAgBJ,QAAhB,C","sourcesContent":["import React, { useContext } from 'react'\nimport Head from 'next/head'\nimport PropTypes from 'prop-types'\nimport { useAmp } from 'next/amp'\nimport withDataBinding from './bind/withDataBinding'\nimport AmpContext from './AmpContext'\n\n/**\n * Creates an amp-state with an initial value\n */\nfunction AmpState({ id, amp, remote, initialState, children }) {\n  const { nextId } = useContext(AmpContext) || {}\n\n  id = id || nextId()\n\n  children = children ? children(id) : null\n\n  const props = { id }\n\n  if (remote) {\n    Object.assign(props, amp.bind({ attribute: 'src', value: remote.expression }), {\n      src: remote.url,\n    })\n  }\n\n  if (useAmp()) {\n    return (\n      <>\n        <Head>\n          <script\n            async\n            custom-element=\"amp-bind\"\n            src=\"https://cdn.ampproject.org/v0/amp-bind-0.1.js\"\n          />\n        </Head>\n        <amp-state {...props}>\n          <script\n            type=\"application/json\"\n            dangerouslySetInnerHTML={{\n              __html: JSON.stringify(initialState),\n            }}\n          />\n        </amp-state>\n        {children}\n      </>\n    )\n  } else {\n    return children\n  }\n}\n\nAmpState.propTypes = {\n  /**\n   * An id for the amp-state element\n   */\n  id: PropTypes.string,\n  /**\n   * The initial value of the state\n   */\n  initialState: PropTypes.any,\n  /**\n   * Object which contains the URL and expression for fetching\n   * new state\n   */\n  remote: PropTypes.object,\n}\n\nAmpState.defaultProps = {\n  initialState: {},\n}\n\nexport default withDataBinding(AmpState)\n"],"file":"AmpState.js"}