"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = AmpMenuBody;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _MenuBody = _interopRequireDefault(require("react-storefront/menu/MenuBody"));

var _makeStyles = _interopRequireDefault(require("@material-ui/core/styles/makeStyles"));

var _clsx = _interopRequireDefault(require("clsx"));

var _MenuContext = _interopRequireDefault(require("react-storefront/menu/MenuContext"));

var _amp = require("next/amp");

function AmpMenuBody(props) {
  if (!(0, _amp.useAmp)()) {
    return _react["default"].createElement(_MenuBody["default"], props);
  }

  var _useContext = (0, _react.useContext)(_MenuContext["default"]),
      drawerWidth = _useContext.drawerWidth;

  var styles = function styles(theme) {
    return {
      ampBody: {
        transform: 'translateX(0px)',
        overflowY: 'auto',
        height: '100%',
        left: 0,
        top: 0,
        position: 'absolute',
        display: 'flex',
        flex: '1 1 0%',
        transition: 'transform ease-out .2s',
        alignItems: 'stretch',
        '&.card0': {
          transform: 'translateX(0)'
        },
        '&.card1': {
          transform: "translateX(".concat(-1 * drawerWidth, "px)")
        },
        '&.card2': {
          transform: "translateX(".concat(-2 * drawerWidth, "px)")
        },
        '&.card3': {
          transform: "translateX(".concat(-3 * drawerWidth, "px)")
        }
      }
    };
  };

  var useStyles = (0, _makeStyles["default"])(styles, {
    name: 'RSFAmpMenuBody'
  });
  var classes = useStyles(props);
  return _react["default"].createElement(_MenuBody["default"], (0, _extends2["default"])({}, props, {
    classes: {
      bodyWrap: (0, _clsx["default"])(classes.ampBody, classes.inFocus)
    },
    wrapProps: {
      // This conditional handles the positioning of each menu body
      // By default all bodies except for root are hidden to the right
      //
      // If moving forward through the menu, the current body translates in
      // from the right and the previous body is translated to the left.
      //
      // When moving backwards this is reversed. There are some checks for the root
      // body since it always is hidden to the left.
      'amp-bind': "class->'".concat(classes.ampBody, "' + ' card' + (rsfMenuState.card || 0)")
    }
  }));
}

AmpMenuBody.propTypes = _MenuBody["default"].propTypes;
AmpMenuBody.defaultProps = _MenuBody["default"].defaultProps;
//# sourceMappingURL=AmpMenuBody.js.map