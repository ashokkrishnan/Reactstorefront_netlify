"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = renderAmp;
exports.removeInvalidCssClasses = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _cheerio = _interopRequireDefault(require("cheerio"));

var _reactStorefrontAnalytics = require("react-storefront-analytics");

var _batchPromises = _interopRequireDefault(require("./utils/batchPromises"));

var _getImageSize = _interopRequireDefault(require("./utils/getImageSize"));

var _url = require("./utils/url");

var _url2 = _interopRequireDefault(require("url"));

var INVALID_CSS_CLASS_REGEX = /\.i-(amphtml[^\s.]*)/g;

var removeInvalidCssClasses = function removeInvalidCssClasses(sheets) {
  sheets.sheetsRegistry.registry.forEach(function (reg) {
    var invalidKeys = Object.keys(reg.rules.map).filter(function (key) {
      return key.includes('.i-amphtml');
    });
    invalidKeys.forEach(function (key) {
      var replacementKey = key.replace(INVALID_CSS_CLASS_REGEX, '[class*="$1"]');
      reg.rules.map[replacementKey] = reg.rules.map[key];
      var styleIndex = reg.rules.index.find(function (idx) {
        return idx.key === key;
      });
      styleIndex.key = styleIndex.selectorText = styleIndex.options.selector = replacementKey;
      delete reg.rules.map[key];
    });
  });
  return sheets;
};

exports.removeInvalidCssClasses = removeInvalidCssClasses;

function renderAmp(_x, _x2, _x3) {
  return _renderAmp.apply(this, arguments);
}

function _renderAmp() {
  _renderAmp = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(document, sheets, currentUrl) {
    var _ref,
        imageService,
        $,
        imagesThatNeedSizes,
        styleId,
        inlineStyles,
        styles,
        validSheets,
        _args2 = arguments;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _ref = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : {}, imageService = _ref.imageService;
            // $('img').attr({ height: '64', width: '64' })
            // document.html = $('body').html()
            $ = _cheerio["default"].load(document.html);
            imagesThatNeedSizes = []; // Add ⚡ to html

            $('html').attr('⚡', '');

            if (process.env.NODE_ENV === 'development') {
              $('html').attr('data-ampdevmode', '');
            } // remove default css rendering


            $('#ssr-css').remove();
            $('*[amp-bind]').each(function (i, el) {
              var $el = $(el);
              var expressions = $el.attr('amp-bind').split(/,\s*/);
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = expressions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var expression = _step.value;

                  var _expression$split = expression.split('->'),
                      _expression$split2 = (0, _slicedToArray2["default"])(_expression$split, 2),
                      name = _expression$split2[0],
                      value = _expression$split2[1];

                  $el.attr("[".concat(name, "]"), value);
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                    _iterator["return"]();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }

              $el.removeAttr('amp-bind');
            });
            $('amp-img').each(function (i, img) {
              var $img = $(img);
              $img.attr('class', $img.attr('class') + ' ' + $img.attr('classname'));
              $img.removeAttr('classname');
            }); // replace attr="true" with attr

            $('*').each(function (i, el) {
              var $el = $(el);

              for (var name in el.attribs) {
                var value = el.attribs[name];

                if (value === 'true') {
                  $el.attr(name, '');
                }
              }
            }); // Add tabindex and role to all elements with `on` that are not `button` or `a`

            $('[on]').each(function (i, el) {
              var $el = $(el);

              if (!['button', 'a'].includes($el.prop('tagName'))) {
                if ($el.attr('tabindex') == null) {
                  $el.attr('tabindex', '0');
                }

                if ($el.attr('role') == null) {
                  $el.attr('role', 'button');
                }
              }
            });
            $('*[classname]').each(function (i, el) {
              var $el = $(el);
              $el.attr('class', $el.attr('classname'));
              $el.removeAttr('classname');
            }); // remove invalid attributes on all svg elements

            $('svg[focusable]').removeAttr('focusable');
            $('svg[xlink]').removeAttr('xlink');
            $('svg[alt]').removeAttr('alt'); // material-ui puts this on tab underlines

            $('div[direction]').removeAttr('direction');
            styleId = 0;
            inlineStyles = new Map();
            styles = []; // move all inline styles to classes in the main style tag

            $('*[style]').each(function (i, el) {
              var $el = $(el);
              var style = $el.attr('style');
              var className = inlineStyles.get(style);

              if (!className) {
                className = "mi".concat(styleId++);
                inlineStyles.set(style, className);
                styles.push(".".concat(className, " {").concat(style, "}"));
              }

              $el.removeAttr('style');
              $el.addClass(className);
            }); // replace all img tags with amp-img

            $('img').each(function (_, img) {
              var $img = $(img);
              var $ampImg = $('<amp-img layout="intrinsic"></amp-img>');
              if ($img.attr('src')) $ampImg.attr('src', $img.attr('src'));
              if ($img.attr('alt')) $ampImg.attr('alt', $img.attr('alt'));
              if ($img.attr('height')) $ampImg.attr('height', $img.attr('height'));
              if ($img.attr('width')) $ampImg.attr('width', $img.attr('width'));
              if ($img.attr('data-height')) $ampImg.attr('height', $img.attr('data-height'));
              if ($img.attr('data-width')) $ampImg.attr('width', $img.attr('data-width'));

              for (var name in img.attribs) {
                if (name.startsWith('data-amp-')) {
                  $ampImg.attr(name.replace(/^data-amp-/, ''), img.attribs[name]);
                }
              }

              $img.replaceWith($ampImg);
            }); // All img tags need a height and width in AMP.  If those are missing, call moovweb's image size service
            // to get the height and width and assign it to the image.

            $('amp-img').each(function (_, img) {
              var $img = $(img);

              if ($img.attr('layout') == 'fill') {
                return;
              } else if (!$img.attr('height') || !$img.attr('width')) {
                imagesThatNeedSizes.push($img);
              }
            }); // Fetch sizes for images that are missing a height and width in batches of 10 concurrently.

            _context2.next = 23;
            return (0, _batchPromises["default"])(10, imagesThatNeedSizes,
            /*#__PURE__*/
            function () {
              var _ref2 = (0, _asyncToGenerator2["default"])(
              /*#__PURE__*/
              _regenerator["default"].mark(function _callee($img) {
                var src, url, _ref3, height, width;

                return _regenerator["default"].wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        src = $img.attr('src');
                        _context.prev = 1;
                        url = src.startsWith('data:') ? src : (0, _url.absoluteURL)(src, _url2["default"].parse(currentUrl));
                        _context.next = 5;
                        return (0, _getImageSize["default"])(url, imageService);

                      case 5:
                        _ref3 = _context.sent;
                        height = _ref3.height;
                        width = _ref3.width;
                        $img.attr('height', height);
                        $img.attr('width', width);
                        _context.next = 15;
                        break;

                      case 12:
                        _context.prev = 12;
                        _context.t0 = _context["catch"](1);
                        console.log("warning: could not get height and width for ".concat(src), _context.t0);

                      case 15:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, null, [[1, 12]]);
              }));

              return function (_x4) {
                return _ref2.apply(this, arguments);
              };
            }());

          case 23:
            $('body').addClass('moov-amp').prepend((0, _reactStorefrontAnalytics.renderAmpAnalyticsTags)());
            document.html = $.html(); // replaces any CSS selectors starting with '.i-amphtml-(etc)' with 'class*=["amphtml-(etc)"]'

            validSheets = removeInvalidCssClasses(sheets);
            document.head.push(_react["default"].createElement("meta", {
              key: 'amp-google-client-id-api',
              name: "amp-google-client-id-api",
              content: "googleanalytics"
            }), _react["default"].createElement("script", {
              key: 'amp-analytics',
              async: true,
              "custom-element": "amp-analytics",
              src: "https://cdn.ampproject.org/v0/amp-analytics-0.1.js"
            }), _react["default"].createElement("style", {
              "amp-custom": validSheets.toString().replace(/\!important/g, '').concat(styles.join('')),
              key: 'amp-custom'
            }));
            return _context2.abrupt("return", document);

          case 28:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _renderAmp.apply(this, arguments);
}
//# sourceMappingURL=renderAmp.js.map