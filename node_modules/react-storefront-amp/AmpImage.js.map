{"version":3,"sources":["../src/AmpImage.js"],"names":["AmpImage","src","optimize","amp","bind","props","isAmp","layout","contain","fill","aspectRatio","additionalProps","attribute","value","getOptimizedSrc","getValue","lazy","AmpImg","className","onError","propTypes","Image","PropTypes","shape","quality","number","width","height","format","oneOf","defaultProps","url","options","qs","stringify","img","replace","encodeURIComponent"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,SAASA,QAAT,OAA0D;AAAA,MAAtCC,GAAsC,QAAtCA,GAAsC;AAAA,MAAjCC,QAAiC,QAAjCA,QAAiC;AAAA,MAAvBC,GAAuB,QAAvBA,GAAuB;AAAA,MAAlBC,IAAkB,QAAlBA,IAAkB;AAAA,MAATC,KAAS;AACxD,MAAMC,KAAK,GAAG,kBAAd;AACA,MAAIC,MAAJ;AAEA,MAAIN,GAAG,IAAI,IAAX,EAAiB,OAAO,IAAP;;AAEjB,MAAIK,KAAJ,EAAW;AACTC,IAAAA,MAAM,GAAGF,KAAK,CAACG,OAAN,IAAiBH,KAAK,CAACI,IAAvB,IAA+BJ,KAAK,CAACK,WAArC,GAAmD,MAAnD,GAA4D,WAArE;AACD;;AAED,MAAMC,eAAe,GAAG,CAACL,KAAD,GACpB,EADoB,qBAGfH,GAAG,CAACC,IAAJ,CAAS;AACVQ,IAAAA,SAAS,EAAE,KADD;AAEVC,IAAAA,KAAK,aAAMC,eAAe,CACxBR,KADwB,EAExB,SAFwB,CAArB,wDAG0CH,GAAG,CAACY,QAAJ,CAAa,KAAb,CAH1C;AAFK,GAAT,CAHe;AAUlBC,IAAAA,IAAI,EAAE,KAVY;AAWlBT,IAAAA,MAAM,EAANA;AAXkB,IAAxB;AAcA,SACE,gCAAC,iBAAD,gCACMF,KADN,EAEMM,eAFN;AAGE,IAAA,GAAG,EAAEG,eAAe,CAACR,KAAD,EAAQL,GAAR,EAAaC,QAAb,CAHtB;AAIE,IAAA,UAAU,EAAEI,KAAK,GAAGW,MAAH,GAAY;AAJ/B,KADF;AAQD;;AAED,SAASA,MAAT,QAAkD;AAAA,MAAhCC,SAAgC,SAAhCA,SAAgC;AAAA,MAArBC,OAAqB,SAArBA,OAAqB;AAAA,MAATd,KAAS;AAChD,SAAO;AAAS,aAAOa;AAAhB,KAA+Bb,KAA/B,EAAP;AACD;;AAEDL,QAAQ,CAACoB,SAAT,qBACKC,kBAAMD,SADX;AAEE;;;;;;;;AAQAlB,EAAAA,QAAQ,EAAEoB,sBAAUC,KAAV,CAAgB;AACxBC,IAAAA,OAAO,EAAEF,sBAAUG,MADK;AAExBC,IAAAA,KAAK,EAAEJ,sBAAUG,MAFO;AAGxBE,IAAAA,MAAM,EAAEL,sBAAUG,MAHM;AAIxBG,IAAAA,MAAM,EAAEN,sBAAUO,KAAV,CAAgB,CAAC,MAAD,EAAS,MAAT,CAAhB;AAJgB,GAAhB;AAVZ;AAkBA7B,QAAQ,CAAC8B,YAAT,qBACKT,kBAAMS,YADX;AAEE5B,EAAAA,QAAQ,EAAE;AAFZ;;eAKe,iCAAgBF,QAAhB,C;AAEf;;;;;;;;;;;;AAQO,SAASc,eAAT,CAAyBX,GAAzB,EAA8B4B,GAA9B,EAAmCC,OAAnC,EAA4C;AACjD,MAAI,CAACA,OAAD,IAAY,yBAAOA,OAAP,MAAmB,QAAnC,EAA6C;AAC3C,WAAOD,GAAP;AACD;;AACDA,EAAAA,GAAG,sCAA+BE,eAAGC,SAAH,mBAAkBF,OAAlB;AAA2BG,IAAAA,GAAG,EAAEJ;AAAhC,KAA/B,CAAH,CAJiD,CAMjD;;AACA,MAAI5B,GAAJ,EAAS4B,GAAG,GAAGA,GAAG,CAACK,OAAJ,CAAYC,kBAAkB,CAAC,IAAD,CAA9B,EAAsC,IAAtC,EAA4CD,OAA5C,CAAoDC,kBAAkB,CAAC,IAAD,CAAtE,EAA8E,IAA9E,CAAN;AAET,SAAON,GAAP;AACD","sourcesContent":["import React from 'react'\nimport Image from 'react-storefront/Image'\nimport { useAmp } from 'next/amp'\nimport PropTypes from 'prop-types'\nimport withDataBinding from './bind/withDataBinding'\nimport qs from 'qs'\n\nfunction AmpImage({ src, optimize, amp, bind, ...props }) {\n  const isAmp = useAmp()\n  let layout\n\n  if (src == null) return null\n\n  if (isAmp) {\n    layout = props.contain || props.fill || props.aspectRatio ? 'fill' : 'intrinsic'\n  }\n\n  const additionalProps = !isAmp\n    ? {}\n    : {\n        ...amp.bind({\n          attribute: 'src',\n          value: `'${getOptimizedSrc(\n            isAmp,\n            '__url__',\n          )}'.split('__url__').join(encodeURIComponent(${amp.getValue('src')}))`,\n        }),\n        lazy: false,\n        layout,\n      }\n\n  return (\n    <Image\n      {...props}\n      {...additionalProps}\n      src={getOptimizedSrc(isAmp, src, optimize)}\n      ImgElement={isAmp ? AmpImg : 'img'}\n    />\n  )\n}\n\nfunction AmpImg({ className, onError, ...props }) {\n  return <amp-img class={className} {...props} />\n}\n\nAmpImage.propTypes = {\n  ...Image.propTypes,\n  /**\n   * When specified, the image will be optimized for mobile devices by the Moovweb CDN.  Accepts the following keys:\n   *\n   * - quality  - (optional) A number or string containing the number for the desired quality, on a scale from 1 (worst) to 100 (best)\n   * - width - (optional) A number or string containing the number for the desired pixel width on phones. You only need to specify \"height\" or \"width\".  The original aspect ratio of the image is preserved.\n   * - height - (optional) A number or string containing the number for the desired pixel height. You only need to specify \"height\" or \"width\".  The original aspect ratio of the image is preserved.\n   * - format - (optional, defaults to webp) A string containing the desired file format. Accepts \"webp\" or \"jpeg\".  If webp is specified but the user's browser doesn not support webp, jpeg will be used.\n   */\n  optimize: PropTypes.shape({\n    quality: PropTypes.number,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    format: PropTypes.oneOf(['webp', 'jpeg']),\n  }),\n}\n\nAmpImage.defaultProps = {\n  ...Image.defaultProps,\n  optimize: null,\n}\n\nexport default withDataBinding(AmpImage)\n\n/**\n * Returns a URL for Moovweb's image optimizer for the given src URL and optimization\n * options\n * @param {Boolean} amp Set to true when rendering amp\n * @param {String} url The source image url\n * @param {Object} options See the prop types for AmpImage\n * @return {String}\n */\nexport function getOptimizedSrc(amp, url, options) {\n  if (!options || typeof options !== 'object') {\n    return url\n  }\n  url = `https://opt.moovweb.net/?${qs.stringify({ ...options, img: url })}`\n\n  // this allows use to generate optimized URLs using moustache templates, as in the case of `AmpSearchSuggestions`\n  if (amp) url = url.replace(encodeURIComponent('{{'), '{{').replace(encodeURIComponent('}}'), '}}')\n\n  return url\n}\n"],"file":"AmpImage.js"}