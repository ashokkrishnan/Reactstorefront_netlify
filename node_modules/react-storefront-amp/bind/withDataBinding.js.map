{"version":3,"sources":["../../src/bind/withDataBinding.js"],"names":["ampStringify","object","keys","Object","map","key","join","createStateChange","expression","value","node","state","split","i","length","withDataBinding","Component","Wrapped","bind","name","props","normalizedBind","normalizeBind","DataBindingContext","ampState","getValue","setValue","boundProps","getBoundProps","createAmpValueExpression","getAmpValue","amp","getAmpBind","on","createAmpHandlerAttribute","setState","createAmpStateChangeDescriptor","createHandler","createAmpHandlerDescriptor","propTypes","attribute","prop","undefined","eventHandlerDescriptors","eventStrings","filter","Boolean","eventHandler","event","actions","actionStrings","stateChanges","forEach","action","push","changes","createStateChanges","reduce","memo","obj","expressions","console","warn","valuePropPairs","pair","Array","isArray","normalizeBindValue","getBoundValue","getCallback","v"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\nimport DataBindingContext from './DataBindingContext'\nimport { useAmp } from 'next/amp'\nimport isObject from 'lodash/isObject'\nimport isString from 'lodash/isString'\nimport isUndefined from 'lodash/isUndefined'\nimport upperFirst from 'lodash/upperFirst'\n\n// Converts an object to a string suitable for AMP setState\nfunction ampStringify(object) {\n  if (typeof object !== 'object') return object\n  const keys = Object.keys(object).map(key => {\n    return `${key}:${ampStringify(object[key])}`\n  })\n  return `{${keys.join(',')}}`\n}\n\n// Converts an expression with dot notation to a nested object\n// Example:\n//    `foo.bar = value` -> { foo: { bar: value } }\nfunction createStateChange(expression, value) {\n  if (expression == null) return null\n  let node = {}\n  const state = node\n  const keys = expression.split('.')\n  // Building out the nested object\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i]\n    node[key] = i === keys.length - 1 ? value : {}\n    node = node[key]\n  }\n  return state\n}\n\n/**\n * A higher-order function that adds 2-way databinding to a component.\n *\n * This provides the foundation for making components that can read and write state\n * in both React and AMP using a single API.\n *\n * For example, given a SizeField component that allows the user to choose a product size, but doesn't work in AMP:\n *\n * ```js\n * <SizeField value={product.size} onChange={size => updateStore({ product: { size: value })}/>\n * ```\n *\n * Wrapping it in `withDataBinding(SizeField)` would give you the ability to do this instead, which would work in AMP and React:\n *\n * ```js\n * <SizeField bind=\"product.size\"/>\n * ```\n *\n * To generate more complex Amp event handlers, the \"on\" attribute can be generated for a component\n * that uses withDataBinding by creating handlers for each event:\n *\n * ```\n * <div\n *   {...amp.on(\n *     amp.createHandler('tap',\n *       amp.setState({ prop: 'index', value: 'event.index' }),\n *       `myCarousel.goToSlide(index=event.index)`\n *     ),\n *     amp.createHandler('slideChange',\n *       amp.setState({ prop: 'index', value: 'event.index' }),\n *       `myOtherCarousel.goToSlide(index=event.index)`\n *     )\n *   )}\n * />\n * ```\n *\n * @param {Function} Component\n * @return {Function}\n */\nexport default function withDataBinding(Component) {\n  const Wrapped = ({ bind, name, ...props }) => {\n    const normalizedBind = normalizeBind(bind)\n    const { ampState, getValue, setValue } = useContext(DataBindingContext) || {}\n    const boundProps = getBoundProps(normalizedBind, getValue, setValue)\n    const createAmpValueExpression = getAmpValue(ampState, normalizedBind)\n    const amp = useAmp()\n\n    if (!name && typeof bind === 'string') {\n      name = bind\n    }\n\n    return (\n      <Component\n        {...props}\n        {...boundProps}\n        name={name}\n        bind={normalizedBind}\n        amp={{\n          state: ampState,\n          getValue: createAmpValueExpression,\n          bind: getAmpBind(amp, bind, createAmpValueExpression),\n          on: createAmpHandlerAttribute(amp, normalizedBind, ampState),\n          setState: createAmpStateChangeDescriptor,\n          createHandler: createAmpHandlerDescriptor(normalizedBind, ampState),\n        }}\n      />\n    )\n  }\n\n  Wrapped.propTypes = Component.propTypes\n  return Wrapped\n}\n\n/**\n * Creates a function that creates an amp-bind expression for a given field and prop.\n * @param {Boolean} amp True when amp is enabled\n * @param {Object} bind The bind prop\n * @param {Function} createAmpValueExpression A function that generates AMP values expressions for the current state.\n * @return {Object} A props object to spread\n */\nfunction getAmpBind(amp, bind, createAmpValueExpression) {\n  if (!amp || !bind) return () => ({})\n  return ({ attribute, prop, value }) => ({\n    'amp-bind': `${attribute}->${value !== undefined ? value : createAmpValueExpression(prop)}`,\n  })\n}\n\n/**\n * Creates the \"on\" attribute for a component to react to an AMP event. Uses the descriptors created\n * by amp.createHandler() to generate the attribute by appending the expression strings for each\n * event into an expression usable by Amp.\n * @param {Boolean} amp True when amp is enabled\n * @param {Object} bind The normalized bind expression\n * @param {String} ampState The amp state id\n * @return {Function}\n */\nfunction createAmpHandlerAttribute(amp, bind, ampState) {\n  if (!amp || Object.keys(bind).length === 0) return () => ({})\n\n  return (...eventHandlerDescriptors) => {\n    const eventStrings = eventHandlerDescriptors\n      .filter(Boolean)\n      .map(eventHandler => `${eventHandler.event}:${eventHandler.actions.join(',')}`)\n\n    return eventStrings.length\n      ? {\n          on: eventStrings.join(';'),\n        }\n      : {}\n  }\n}\n\n/**\n *\n * Creates a descriptor to be used by amp.on() to set the \"on\" attribute for a component to react to\n * an AMP event\n * @param {Object} normalizedBind The normalized bind object\n * @param {String} ampState The amp state id\n * @return {function(*, ...[*]): {event: *, actions: Array}} Returns a function that expects an event\n * and a list of action descriptors; function will be used by amp.on() to create the \"on\" attribute\n */\nfunction createAmpHandlerDescriptor(normalizedBind, ampState) {\n  return (event, ...actions) => {\n    const actionStrings = []\n    const stateChanges = []\n    actions.forEach(action => {\n      if (isString(action)) {\n        actionStrings.push(action)\n      } else if (action.stateChanges) {\n        stateChanges.push(...action.stateChanges)\n      }\n    })\n    if (stateChanges.length) {\n      const changes = createStateChanges(stateChanges, normalizedBind)\n      if (changes) {\n        // Merge changes into a single change object\n        const value = changes.reduce((memo, obj) => {\n          return { ...memo, ...obj }\n        }, {})\n        // If a change exists, convert that change object into a AMP expression\n        if (Object.keys(value).length > 0) {\n          actionStrings.push(`AMP.setState({${ampState}:${ampStringify(value)}})`)\n        }\n      }\n    }\n    if (actionStrings.length) {\n      return {\n        event,\n        actions: actionStrings,\n      }\n    }\n    return null\n  }\n}\n\n/**\n * Creates an array to use for the state changes needed based on the value/prop pairs\n * @param {Object[]} stateChanges Array of prop+values that should be changed in the state\n * @param {Object} bind The normalized bind object\n * @return {string}\n */\nfunction createStateChanges(stateChanges, bind) {\n  return stateChanges.map(({ value, prop = 'value' }) => {\n    const expressions = bind[prop]\n    if (!expressions) {\n      console.warn(\n        `could not create AMP event handler for prop ${prop}. No prop with that name was found.`,\n      )\n      return\n    }\n    return createStateChange(expressions[0], value)\n  })\n}\n\n/**\n * Creates a descriptor used by createAmpHandlerAttribute to update AMP state when an even occurs\n * @param {Object[]} valuePropPairs A list of objects with a \"value\" prop for a value expression\n * that would set the optional \"prop\" prop (\"prop\" defaults to \"value\")\n * @return {{stateChanges: Array}} An array of descriptors to be used by amp.createHandler\n */\nfunction createAmpStateChangeDescriptor(...valuePropPairs) {\n  const stateChanges = []\n  valuePropPairs.forEach(pair => {\n    if (isUndefined(pair.value)) {\n      console.warn(\n        'AMP state change must have a \"value\" prop for each object passed to amp.setState',\n      )\n    } else {\n      stateChanges.push(pair)\n    }\n  })\n\n  return { stateChanges }\n}\n\n/**\n * Converts the following forms of bind:\n *\n * bind=\"someValue\"\n *\n * bind={['preferredValue', 'defaultValue']}\n *\n * bind={{\n *   src: 'thumbnail.src',\n *   alt: 'thumbnail.alt'\n * }}\n *\n * to:\n *\n * bind={{\n *   src: ['thumbnail.src'],\n *   alt: ['thumbnail.alt']\n * }}\n *\n * @param {Object|String[]|String} bind The raw bind prop value\n * @return {Object}\n */\nfunction normalizeBind(bind) {\n  if (!bind) return {}\n\n  if (!isObject(bind) || Array.isArray(bind)) {\n    bind = { value: bind }\n  }\n\n  for (let key in bind) {\n    bind[key] = normalizeBindValue(bind[key])\n  }\n\n  return bind\n}\n\n/**\n * Ensures that the specified value expression is an array\n * @param {String|String[]} value\n * @return {String[]}\n */\nfunction normalizeBindValue(value) {\n  if (Array.isArray(value)) {\n    return value\n  } else {\n    return [value]\n  }\n}\n\n/**\n * Creates value and event handler props for each bound property.  In other words,\n * for `bind=\"value\"`, returns:\n *\n * ```js\n * {\n *   value: (the value)\n *   onChange: (function to update the value)\n * }\n * ```\n *\n * @param {Object} bind\n * @param {Function} getValue\n * @param {Function} setValue\n * @return {Object}\n */\nfunction getBoundProps(bind, getValue, setValue) {\n  const props = {}\n\n  for (let prop in bind) {\n    const expression = bind[prop]\n    props[prop] = getBoundValue(expression, getValue)\n\n    if (expression.length === 1) {\n      props[getCallback(prop)] = value => {\n        setValue(expression[0], value)\n      }\n    }\n  }\n\n  return props\n}\n\n/**\n * Gets the name of the event callback\n * @param {String} prop\n * @return {String}\n */\nfunction getCallback(prop) {\n  if (prop === 'value') {\n    return 'onChange'\n  } else {\n    return `on${upperFirst(prop)}Change`\n  }\n}\n\n/**\n * Gets the current value in the store for a binding\n * @param {String[]} expressions\n * @param {Function} getValue\n */\nfunction getBoundValue(expressions, getValue) {\n  for (let expression of expressions) {\n    const value = getValue(expression)\n\n    if (value != null) {\n      return value\n    }\n  }\n  return null\n}\n\n/**\n * Returns an expression to get a value from the AMP state.\n * @param {String} ampState The amp state id\n * @param {Object} bind The bind expressions\n * @return {String}\n */\nfunction getAmpValue(ampState, bind) {\n  return (prop = 'value') => {\n    if (!bind[prop]) {\n      return null\n    } else if (bind[prop].length === 1) {\n      return `${ampState}.${bind[prop]}`\n    } else {\n      return `(${bind[prop].map(v => `${ampState}.${v}`).join('||')})`\n    }\n  }\n}\n"],"file":"withDataBinding.js"}