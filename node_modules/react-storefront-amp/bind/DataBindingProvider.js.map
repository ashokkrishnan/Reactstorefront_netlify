{"version":3,"sources":["../../src/bind/DataBindingProvider.js"],"names":["parseRemote","remote","remoteVariablePattern","getUrl","root","decodeURI","replace","_","path","getExpression","prefix","DataBindingProvider","id","children","store","updateStore","lastRemoteUrl","url","value","getValue","normalizeRoot","setValue","newStore","ampState","current","fetch","then","res","json","pageData","ampStateProps","bind","initialState","useAmp","expression","propTypes","PropTypes","string","object","func","defaultProps","Function","prototype"],"mappings":"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","sourcesContent":["import React, { useRef, useMemo, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { useAmp } from 'next/amp'\nimport DataBindingContext from './DataBindingContext'\nimport get from 'lodash/get'\nimport set from 'lodash/set'\nimport merge from 'lodash/merge'\nimport AmpState from '../AmpState'\n\nfunction parseRemote(remote) {\n  const remoteVariablePattern = /{([^}]+)}/g\n  return {\n    getUrl(root) {\n      if (!remote) return null\n      return decodeURI(remote).replace(remoteVariablePattern, (_, path) => get(root, path))\n    },\n    getExpression(prefix) {\n      if (!remote) return null\n      return (\n        '\"' +\n        decodeURI(remote).replace(remoteVariablePattern, (_, path) => {\n          return `\"+${prefix}.${path}+\"`\n        }) +\n        '\"'\n      )\n    },\n  }\n}\n\n/**\n * Provides a way to access and update state that works with both React and AMP.\n *\n * All page components should use `DataBindingProvider` as the root element:\n *\n * ```js\n * function Product(lazyProps) {\n *   const [store, updateStore] = useLazyStore(lazyProps)\n *\n *   return (\n *     <DataBindingProvider store={store} updateStore={updateStore}>\n *        // access values from page state by name\n *        <Typography variant=\"h1\">\n *          <Bind name=\"product.name\"/>\n *        </Typography>\n *\n *        // form fields will automatically update state by name\n *        <Label>QTY:</Label>\n *        <QuantitySelector name=\"quantity\"/>\n *     </DataBindingProvider>\n *   )\n * })\n * ```\n */\nexport default function DataBindingProvider({ id, children, store, updateStore, root, remote }) {\n  const lastRemoteUrl = useRef(null)\n\n  const url = parseRemote(remote).getUrl(store[root])\n\n  const value = useMemo(() => {\n    return {\n      getValue: path => {\n        return get(store, `${normalizeRoot(root)}${path}`)\n      },\n      setValue: (path, value) => {\n        updateStore(store => {\n          const newStore = { ...store }\n          set(newStore, `${normalizeRoot(root)}${path}`, value)\n          return newStore\n        })\n      },\n      ampState: id,\n      root,\n    }\n  }, [store, updateStore, id, root])\n\n  useEffect(() => {\n    if (!remote) return\n\n    if (!lastRemoteUrl.current) {\n      lastRemoteUrl.current = url\n      return\n    }\n\n    if (url !== lastRemoteUrl.current) {\n      lastRemoteUrl.current = url\n      // Fetch new data since remote url changed\n      fetch(url)\n        .then(res => res.json())\n        .then(pageData => {\n          updateStore(() => {\n            const newStore = { ...store }\n            merge(newStore, { pageData })\n            return newStore\n          })\n        })\n    }\n  }, [store])\n\n  const ampStateProps = {\n    id,\n    bind: 'page',\n    initialState: root ? get(store, root) : store,\n  }\n\n  if (useAmp && remote) {\n    ampStateProps.remote = {\n      url,\n      expression: parseRemote(remote).getExpression(id),\n    }\n  }\n\n  return (\n    <DataBindingContext.Provider value={value}>\n      {useAmp && <AmpState {...ampStateProps} />}\n      {children}\n    </DataBindingContext.Provider>\n  )\n}\n\nfunction normalizeRoot(root) {\n  if (root) {\n    return `${root}.`\n  } else {\n    return ''\n  }\n}\n\nDataBindingProvider.propTypes = {\n  /**\n   * An id for the root object\n   */\n  id: PropTypes.string,\n\n  /**\n   * The page store returned from `hooks/useLazyStore`\n   */\n  store: PropTypes.object,\n\n  /**\n   * The page store update function returned from `hooks/useLazyStore`\n   */\n  updateStore: PropTypes.func,\n\n  /**\n   * A path prepended to all paths passed to `getValue` and `setValue`.\n   */\n  root: PropTypes.string,\n\n  /**\n   * A URL for fetching state at runtime when a part of the data model\n   * changes. This is used for both AMP and non-AMP environments.\n   *\n   * Example: \"/api/p/{product.id}?color={color.id}\"\n   *\n   */\n  remote: PropTypes.string,\n}\n\nDataBindingProvider.defaultProps = {\n  id: 'page',\n  store: {},\n  updateStore: Function.prototype,\n  root: 'pageData',\n}\n"],"file":"DataBindingProvider.js"}