"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = DataBindingProvider;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _amp = require("next/amp");

var _DataBindingContext = _interopRequireDefault(require("./DataBindingContext"));

var _get = _interopRequireDefault(require("lodash/get"));

var _set = _interopRequireDefault(require("lodash/set"));

var _merge = _interopRequireDefault(require("lodash/merge"));

var _AmpState = _interopRequireDefault(require("../AmpState"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function parseRemote(remote) {
  var remoteVariablePattern = /{([^}]+)}/g;
  return {
    getUrl: function getUrl(root) {
      if (!remote) return null;
      return decodeURI(remote).replace(remoteVariablePattern, function (_, path) {
        return (0, _get["default"])(root, path);
      });
    },
    getExpression: function getExpression(prefix) {
      if (!remote) return null;
      return '"' + decodeURI(remote).replace(remoteVariablePattern, function (_, path) {
        return "\"+".concat(prefix, ".").concat(path, "+\"");
      }) + '"';
    }
  };
}
/**
 * Provides a way to access and update state that works with both React and AMP.
 *
 * All page components should use `DataBindingProvider` as the root element:
 *
 * ```js
 * function Product(lazyProps) {
 *   const [store, updateStore] = useLazyStore(lazyProps)
 *
 *   return (
 *     <DataBindingProvider store={store} updateStore={updateStore}>
 *        // access values from page state by name
 *        <Typography variant="h1">
 *          <Bind name="product.name"/>
 *        </Typography>
 *
 *        // form fields will automatically update state by name
 *        <Label>QTY:</Label>
 *        <QuantitySelector name="quantity"/>
 *     </DataBindingProvider>
 *   )
 * })
 * ```
 */


function DataBindingProvider(_ref) {
  var id = _ref.id,
      children = _ref.children,
      store = _ref.store,
      updateStore = _ref.updateStore,
      root = _ref.root,
      remote = _ref.remote;
  var lastRemoteUrl = (0, _react.useRef)(null);
  var url = parseRemote(remote).getUrl(store[root]);
  var value = (0, _react.useMemo)(function () {
    return {
      getValue: function getValue(path) {
        return (0, _get["default"])(store, "".concat(normalizeRoot(root)).concat(path));
      },
      setValue: function setValue(path, value) {
        updateStore(function (store) {
          var newStore = _objectSpread({}, store);

          (0, _set["default"])(newStore, "".concat(normalizeRoot(root)).concat(path), value);
          return newStore;
        });
      },
      ampState: id,
      root: root
    };
  }, [store, updateStore, id, root]);
  (0, _react.useEffect)(function () {
    if (!remote) return;

    if (!lastRemoteUrl.current) {
      lastRemoteUrl.current = url;
      return;
    }

    if (url !== lastRemoteUrl.current) {
      lastRemoteUrl.current = url; // Fetch new data since remote url changed

      fetch(url).then(function (res) {
        return res.json();
      }).then(function (pageData) {
        updateStore(function () {
          var newStore = _objectSpread({}, store);

          (0, _merge["default"])(newStore, {
            pageData: pageData
          });
          return newStore;
        });
      });
    }
  }, [store]);
  var ampStateProps = {
    id: id,
    bind: 'page',
    initialState: root ? (0, _get["default"])(store, root) : store
  };

  if (_amp.useAmp && remote) {
    ampStateProps.remote = {
      url: url,
      expression: parseRemote(remote).getExpression(id)
    };
  }

  return _react["default"].createElement(_DataBindingContext["default"].Provider, {
    value: value
  }, _amp.useAmp && _react["default"].createElement(_AmpState["default"], ampStateProps), children);
}

function normalizeRoot(root) {
  if (root) {
    return "".concat(root, ".");
  } else {
    return '';
  }
}

DataBindingProvider.propTypes = {
  /**
   * An id for the root object
   */
  id: _propTypes["default"].string,

  /**
   * The page store returned from `hooks/useLazyStore`
   */
  store: _propTypes["default"].object,

  /**
   * The page store update function returned from `hooks/useLazyStore`
   */
  updateStore: _propTypes["default"].func,

  /**
   * A path prepended to all paths passed to `getValue` and `setValue`.
   */
  root: _propTypes["default"].string,

  /**
   * A URL for fetching state at runtime when a part of the data model
   * changes. This is used for both AMP and non-AMP environments.
   *
   * Example: "/api/p/{product.id}?color={color.id}"
   *
   */
  remote: _propTypes["default"].string
};
DataBindingProvider.defaultProps = {
  id: 'page',
  store: {},
  updateStore: Function.prototype,
  root: 'pageData'
};
//# sourceMappingURL=DataBindingProvider.js.map